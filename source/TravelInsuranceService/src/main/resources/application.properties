server.port=8082
server.error.include-message = always
server.error.include-binding-errors=always

spring.datasource.type=com.zaxxer.hikari.HikariDataSource

#spring.datasource.url= ${DATASOURCE_URL_TRAVELINSURANCE}
#spring.datasource.username= ${DATASOURCE_USERNAME_TRAVELINSURANCE}
#spring.datasource.password= ${DATASOURCE_PASSWORD_TRAVELINSURANCE}

#spring.datasource.url=jdbc:postgresql://10.14.101.204:5432/travelinsurance
#spring.datasource.username=travelinsuranceuser
#spring.datasource.password=travelinsuranceuser

spring.datasource.url=jdbc:postgresql://localhost:5432/travelinsuranceservicedb
spring.datasource.username=useradmin
spring.datasource.password=useradmin

spring.jpa.hibernate.ddl-auto=none
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.show-sql=true

spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

spring.datasource.hikari.maximum-pool-size=1
#spring.datasource.hikari.maximum-pool-size=10
#spring.main.allow-bean-definition-overriding=true

# Hikari will use the above plus the following to setup connection pooling
#spring.datasource.hikari.pool-name=SpringBootJPAHikariCP
#Tuoi tho toi da cua mot connection trong pool
#spring.datasource.hikari.max-lifetime=900000
##hibernate.connection.provider_disables_autocommit =
#spring.datasource.tomcat.time-between-eviction-runs-millis=60000
##60 sec timeout connection
#spring.datasource.hikari.connection-timeout=30000
## max 20 connection pool size
#spring.datasource.hikari.maximum-pool-size=5
#Thiet lap thoi gian toi da ma ket noi duoc phep de o che do cho trong pool
#spring.datasource.hikari.idle-timeout=3000
##test connect is live
#spring.datasource.tomcat.validation-query=SELECT 1
##test connect is live expire
#spring.datasource.hikari.validation-timeout=1000

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1



#cache
spring.cache.jcache.config=classpath:ehcache.xml
spring.cache.jcache.provider=org.ehcache.jsr107.EhcacheCachingProvider
#debug=true


#publicKey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmc/v6F2EojB+4zzMkTOQbNXWJ2W9eHys98rbGhqKahqvOXV4PsjxkYB4ergZGiccE+hK/HgqLvH26m7GtocrK6p5AWJED0wZ46W7R6Z7tmmVoSAzNN0W3mQdHKul9V1Enq9CRyRbPxBj+MvLRXkUxoP6OyMJJXUdtQTmOU1QB0EDnx2TiAOLUSfFHHw/1j1R07B2Pc2KltYxSeItDf8k85z8WdeEGuHv6TuTzhduiHLRqg5QjKlNga+Rlg91dJYviwLzrcZfRxjLVhf3nmD05R7kNs0LsdBa1fUB+PLpbatdo6cSr2LbgXlY37K/NOkuoL3DeAW7tznw4Kt3moYP+QIDAQAB

#log metrics
#management.endpoints.web.exposure.include=*
#management.endpoints.jmx.exposure.include=*
#management.endpoints.jmx.exposure.exclude=
